# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main
trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'azDevTestRG01'
  bkstrg: 'sptest01'
  bkcontainer: 'tfstate'
  bkstrgkey: 'devpipeline.terraform.tfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskv3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'TestServiceConnection'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmResourceContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskv3@3
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded ('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskv3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'TestServiceConnection'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmResourceContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskv3@3
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'TestServiceConnection'
          - task: TerraformTaskv3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'TestServiceConnection'
  - stage: Security
    dependsOn: tfdeploy
    jobs:
    - job: DefenderForCloud
      displayName: 'Microsoft Defender for Cloud'
      steps:
      - task: MicrosoftSecurityDevOps@0
        displayName: 'Run Microsoft Security DevOps'
        inputs:
          toolMajorVersion: 'latest' # Use the latest version of the tool
      - task: PublishBuildArtifacts@1
        displayName: 'Uploading findings from third-party security tooling into Defender for Cloud'
        inputs:
          PathtoPublish: 'results.sarif'
          ArtifactName: 'CodeAnalysisLogs'



